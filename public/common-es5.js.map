{"version":3,"sources":["webpack:///src/app/protected/routes/protected.routes.ts","webpack:///src/app/protected/services/token-header.service.ts","webpack:///src/app/protected/services/users-requests.service.ts","webpack:///src/app/shared/services/toastr.service.ts"],"names":["dashboardRoutes","main","adminsRoutes","registration","viewAll","doctorsRoutes","patientsRoutes","addRecords","editPatientBase","addSinglePatientRecordBase","editSinglePatientRecordBase","viewSinglePatientRecordBase","viewPatientHistoryBase","roomsRoutes","inspect","bedsRoutes","devicesRoutes","TokenHeaderService","accessToken","localStorage","getItem","providedIn","UsersRequestsService","http","tokenService","baseUrl","filter","url","get","headers","xTokenHeader","id","newDoctor","newDoctorData","firstName","lastName","email","mobileNumber","username","password","roles","imageURI","post","newAdmin","newAdminData","user","userModifiedData","put","doctorId","adminId","ToastrService","nbToastrService","errorMessage","show","status","position","TOP_RIGHT","duration","hasIcon","toastrTitle","successMessage"],"mappings":"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","file":"common-es5.js","sourcesContent":["export const dashboardRoutes = {\r\n  main: '/home/dashboard',\r\n};\r\n\r\nexport const adminsRoutes = {\r\n  main: '/home/admins',\r\n  registration: '/home/admins/register',\r\n  viewAll: '/home/admins/view-all-admins',\r\n};\r\n\r\nexport const doctorsRoutes = {\r\n  main: '/home/doctors',\r\n  registration: '/home/doctors/register',\r\n  viewAll: '/home/doctors/view-all-doctors',\r\n};\r\n\r\nexport const patientsRoutes = {\r\n  main: '/home/patients',\r\n  registration: '/home/patients/register',\r\n  viewAll: '/home/patients/view-all-patients',\r\n  addRecords: '/home/patients/add-patients-records',\r\n  editPatientBase: '/home/patients/edit',\r\n  addSinglePatientRecordBase: '/home/patients/add-patient-record',\r\n  editSinglePatientRecordBase: '/home/patients/edit-patient-record',\r\n  viewSinglePatientRecordBase: '/home/patients/view-patient-record',\r\n  viewPatientHistoryBase: '/home/patients/patient-history',\r\n};\r\n\r\nexport const roomsRoutes = {\r\n  main: '/home/rooms',\r\n  registration: '/home/rooms/register',\r\n  inspect: '/home/rooms/view-all-rooms',\r\n};\r\n\r\nexport const bedsRoutes = {\r\n  main: '/home/beds',\r\n  registration: '/home/beds/register',\r\n  inspect: '/home/beds/view-all-beds',\r\n};\r\n\r\nexport const devicesRoutes = {\r\n  main: '/home/devices',\r\n  registration: '/home/devices/register',\r\n  inspect: '/home/devices/view-all-devices',\r\n};\r\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TokenHeaderService {\n  constructor() {}\n\n  get xTokenHeader(): HttpHeaders {\n    return new HttpHeaders({\n      'x-token': this.accessToken,\n    });\n  }\n\n  get accessToken(): string {\n    return localStorage.getItem('token') || '';\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { environment } from 'environments/environment';\nimport { TokenHeaderService } from './token-header.service';\n\nimport { GetUserByIDResponse } from 'app/protected/interfaces/user/responses/GetUserByIdResponse.interface';\nimport { ListUsersResponse } from 'app/protected/interfaces/user/responses/ListUsersResponse.interface';\nimport { UserCreationResponse } from 'app/protected/interfaces/user/responses/UserCreationResponse.interface';\nimport { UserModificationResponse } from 'app/protected/interfaces/user/responses/UserModificationResponse.interface';\nimport { UserCreation } from 'app/protected/interfaces/user/User.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersRequestsService {\n  private baseUrl = environment.baseUrl;\n\n  constructor(\n    private http: HttpClient,\n    private tokenService: TokenHeaderService,\n  ) {}\n\n  listDoctors(filter?: string): Observable<ListUsersResponse> {\n    let url = this.baseUrl + '/users/doctors';\n    if (filter) url += `?filter=${filter}`;\n    return this.http.get<ListUsersResponse>(url, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  listAdmins(filter?: string): Observable<ListUsersResponse> {\n    let url = this.baseUrl + '/users/admins';\n    if (filter) url += `?filter=${filter}`;\n    return this.http.get<ListUsersResponse>(url, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  getDoctorById(id: string): Observable<GetUserByIDResponse> {\n    const url = this.baseUrl + `/users/doctors/${id}`;\n    return this.http.get<GetUserByIDResponse>(url, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  getAdminById(id: string): Observable<GetUserByIDResponse> {\n    const url = this.baseUrl + `/users/admins/${id}`;\n    return this.http.get<GetUserByIDResponse>(url, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  createDoctor(newDoctor: UserCreation): Observable<UserCreationResponse> {\n    const url = this.baseUrl + '/users';\n\n    const newDoctorData = {\n      firstName: newDoctor.firstName,\n      lastName: newDoctor.lastName,\n      email: newDoctor.email,\n      mobileNumber: newDoctor.mobileNumber,\n      username: newDoctor.username,\n      password: newDoctor.password,\n      roles: ['USER_DOCTOR_ROLE'],\n      ...(newDoctor.imageURI && { imageURI: newDoctor.imageURI }),\n    };\n\n    return this.http.post<UserCreationResponse>(url, newDoctorData, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  createAdmin(newAdmin: UserCreation): Observable<UserCreationResponse> {\n    const url = this.baseUrl + '/users';\n\n    const newAdminData = {\n      firstName: newAdmin.firstName,\n      lastName: newAdmin.lastName,\n      email: newAdmin.email,\n      mobileNumber: newAdmin.mobileNumber,\n      username: newAdmin.username,\n      password: newAdmin.password,\n      roles: ['USER_ADMIN_ROLE'],\n      ...(newAdmin.imageURI && { imageURI: newAdmin.imageURI }),\n    };\n\n    return this.http.post<UserCreationResponse>(url, newAdminData, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  modifyUser(user: UserCreation): Observable<UserModificationResponse> {\n    const url = this.baseUrl + `/users/${user.id}`;\n\n    const userModifiedData = {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      mobileNumber: user.mobileNumber,\n      username: user.username,\n      ...(user.password && { password: user.password }),\n      ...(user.imageURI && { imageURI: user.imageURI }),\n    };\n\n    return this.http.put<UserModificationResponse>(url, userModifiedData, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  deleteDoctor(doctorId: string): Observable<UserModificationResponse> {\n    const url = this.baseUrl + `/users/doctors/${doctorId}`;\n    return this.http.delete<UserModificationResponse>(url, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n\n  deleteAdmin(adminId: string): Observable<UserModificationResponse> {\n    const url = this.baseUrl + `/users/admins/${adminId}`;\n    return this.http.delete<UserModificationResponse>(url, {\n      headers: this.tokenService.xTokenHeader,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NbGlobalPhysicalPosition, NbToastrService } from '@nebular/theme';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastrService {\n  constructor(private nbToastrService: NbToastrService) {}\n\n  errorToastr(errorMessage: string): void {\n    this.nbToastrService.show(errorMessage, 'Error', {\n      status: 'danger',\n      position: NbGlobalPhysicalPosition.TOP_RIGHT,\n      duration: 6000,\n      hasIcon: true,\n    });\n  }\n\n  successToastr(toastrTitle: string, successMessage: string): void {\n    this.nbToastrService.show(successMessage, toastrTitle, {\n      status: 'success',\n      position: NbGlobalPhysicalPosition.TOP_RIGHT,\n      duration: 6000,\n      hasIcon: true,\n    });\n  }\n}\n"]}