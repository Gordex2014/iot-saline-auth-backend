{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hooks/useForm.js","views/doctors/ViewAllDoctors.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","ViewAllDoctors","doctors","setDoctors","query","formValues","useEffect","fetchWithToken","then","response","json","data","body","catch","error","console","log","handleFetchQuery","a","resp","Fragment","htmlFor","xs","sm","md","lg","type","id","placeholder","autoComplete","onChange","onKeyDown","e","key","preventDefault","stopPropagation","color","shape","size","className","onClick","map","doctor","xl","firstName","lastName","src","imageUrl","defaultUser","fluid","width","align","username","email","mobileNumber","to"],"mappings":"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","file":"static/js/12.15142a50.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState } from \"react\";\r\n\r\nexport const useForm = (initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const reset = () => {\r\n    setValues(initialState);\r\n  };\r\n\r\n  const handleInputChange = ({ target }) => {\r\n    setValues({\r\n      ...values,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCardTitle,\r\n  CCol,\r\n  CForm,\r\n  CFormGroup,\r\n  CFormText,\r\n  CImg,\r\n  CInput,\r\n  CLabel,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\n\r\nimport { fetchWithToken } from \"src/helpers/fetch\";\r\nimport { useForm } from \"src/hooks/useForm\";\r\nimport defaultUser from \"src/assets/images/default-user.jpg\";\r\n\r\nconst ViewAllDoctors = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [formValues, handleInputChange, reset] = useForm({ query: \"\" });\r\n  const { query } = formValues;\r\n  useEffect(() => {\r\n    fetchWithToken(\"users/doctors\")\r\n      .then((response) => response.json())\r\n      .then((data) => setDoctors(data.body))\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const handleFetchQuery = async () => {\r\n    const resp = await fetchWithToken(`users/doctors?filter=${query}`);\r\n    const { body } = await resp.json();\r\n    if (body) {\r\n      setDoctors(body);\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const onKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      handleFetchQuery();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CRow>\r\n        <CCol>\r\n          <CForm>\r\n            <CFormGroup>\r\n              <CRow>\r\n                <CCol>\r\n                  <CLabel htmlFor=\"nf-email\">Búsqueda por nombre</CLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol xs=\"9\" sm=\"10\" md=\"11\" lg=\"11\">\r\n                  <CInput\r\n                    type=\"text\"\r\n                    id=\"nf-text\"\r\n                    name=\"query\"\r\n                    placeholder=\"Busque por nombre...\"\r\n                    autoComplete=\"off\"\r\n                    value={query}\r\n                    onChange={handleInputChange}\r\n                    onKeyDown={onKeyDown}\r\n                  />\r\n                </CCol>\r\n                <CCol xs=\"3\" sm=\"2\" md=\"1\" lg=\"1\">\r\n                  <CButton\r\n                    color=\"info\"\r\n                    shape=\"square\"\r\n                    size=\"sm\"\r\n                    className=\"my-1\"\r\n                    onClick={handleFetchQuery}\r\n                  >\r\n                    Buscar\r\n                  </CButton>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CCol>\r\n                  <CFormText className=\"help-block\">\r\n                    Por favor ingrese el nombre del médico que desea buscar\r\n                  </CFormText>\r\n                </CCol>\r\n              </CRow>\r\n            </CFormGroup>\r\n          </CForm>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        {doctors.map((doctor) => {\r\n          return (\r\n            <CCol xs=\"12\" sm=\"6\" xl=\"4\" key={doctor.id}>\r\n              <CCard>\r\n                <CCardHeader>\r\n                  {doctor.firstName} {doctor.lastName}\r\n                  <div className=\"card-header-actions\">\r\n                    <CIcon name=\"cil-check\" className=\"float-right\" />\r\n                  </div>\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                  <CCardTitle className=\"text-center\">\r\n                    <CImg\r\n                      src={doctor.imageUrl ? doctor.imageUrl : defaultUser}\r\n                      shape=\"rounded-circle\"\r\n                      fluid\r\n                      width=\"100px\"\r\n                      align=\"center\"\r\n                      className=\"my-3 mx-2\"\r\n                    />\r\n                  </CCardTitle>\r\n\r\n                  <p>\r\n                    <span className=\"font-weight-bold\">\r\n                      Nombre de usuario:{\" \"}\r\n                    </span>\r\n                    {doctor.username}\r\n                  </p>\r\n                  <p>\r\n                    <span className=\"font-weight-bold\">Correo: </span>\r\n                    {doctor.email}\r\n                  </p>\r\n                  <p>\r\n                    <span className=\"font-weight-bold\">Celular: </span>\r\n                    {doctor.mobileNumber}\r\n                  </p>\r\n\r\n                  <CCardFooter className=\"text-center\">\r\n                    <Link to={`/doctors/${doctor.id}`}>\r\n                      <CButton\r\n                        color=\"outline-info\"\r\n                        shape=\"pill\"\r\n                        className=\"m-2\"\r\n                        size=\"lg\"\r\n                      >\r\n                        Editar\r\n                      </CButton>\r\n                    </Link>\r\n                  </CCardFooter>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          );\r\n        })}\r\n      </CRow>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewAllDoctors;\r\n"],"sourceRoot":""}