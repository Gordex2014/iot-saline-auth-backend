{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hooks/useForm.js","views/admins/CreateNewAdmin.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","CreateNewAdmin","history","formError","setFormError","success","setSuccess","email","firstName","lastName","mobileNumber","password","password2","username","formValues","handleUserCreation","a","fetchWithToken","roles","validRoles","admin","response","json","body","error","Fragment","sm","lg","className","color","htmlFor","placeholder","onChange","autoComplete","type","size","onClick","show","onClose","closeButton"],"mappings":"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","file":"static/js/9.58815a31.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState } from \"react\";\r\n\r\nexport const useForm = (initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const reset = () => {\r\n    setValues(initialState);\r\n  };\r\n\r\n  const handleInputChange = ({ target }) => {\r\n    setValues({\r\n      ...values,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n","import CIcon from \"@coreui/icons-react\";\r\nimport {\r\n  CAlert,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormGroup,\r\n  CFormText,\r\n  CInput,\r\n  CLabel,\r\n  CRow,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalFooter,\r\n} from \"@coreui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { fetchWithToken } from \"src/helpers/fetch\";\r\nimport { useForm } from \"src/hooks/useForm\";\r\nimport { validRoles } from \"src/types/types\";\r\n\r\nconst CreateNewAdmin = ({ history }) => {\r\n  const [formError, setFormError] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [formValues, handleInputChange, reset] = useForm({\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobileNumber: \"\",\r\n    password: \"\",\r\n    password2: \"\",\r\n    username: \"\",\r\n  });\r\n\r\n  const {\r\n    email,\r\n    firstName,\r\n    lastName,\r\n    mobileNumber,\r\n    password,\r\n    password2,\r\n    username,\r\n  } = formValues;\r\n\r\n  const isFormValid = () => {\r\n    if (password !== password2) {\r\n      setFormError(\"Las contraseÃ±as deben de ser iguales\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleUserCreation = async () => {\r\n    if (isFormValid()) {\r\n      const response = await fetchWithToken(\r\n        \"users\",\r\n        {\r\n          email,\r\n          firstName,\r\n          lastName,\r\n          mobileNumber,\r\n          password,\r\n          username,\r\n          roles: [validRoles.admin],\r\n        },\r\n        \"POST\"\r\n      );\r\n      const { body, error } = await response.json();\r\n      if (body) {\r\n        setFormError(\"\");\r\n        setSuccess(true);\r\n        reset();\r\n        return;\r\n      } else {\r\n        setFormError(error);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CRow>\r\n        <CCol sm=\"10\" lg=\"8\" className=\"offset-sm-1 offset-lg-2\">\r\n          {formError && <CAlert color=\"danger\">{formError}</CAlert>}\r\n          <CCard>\r\n            <CCardHeader>\r\n              <small>NUEVO ADMINISTRADOR</small>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"firstName\">Nombres</CLabel>\r\n                <CInput\r\n                  name=\"firstName\"\r\n                  placeholder=\"Nombres\"\r\n                  value={firstName}\r\n                  onChange={handleInputChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CFormGroup>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"lastName\">Apellidos</CLabel>\r\n                <CInput\r\n                  name=\"lastName\"\r\n                  placeholder=\"Apellidos\"\r\n                  value={lastName}\r\n                  onChange={handleInputChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CFormGroup>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"email\">Correo</CLabel>\r\n                <CInput\r\n                  name=\"email\"\r\n                  placeholder=\"Correo\"\r\n                  value={email}\r\n                  onChange={handleInputChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CFormGroup>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"username\">Nombre de usuario</CLabel>\r\n                <CInput\r\n                  name=\"username\"\r\n                  placeholder=\"Nombre de usuario\"\r\n                  value={username}\r\n                  onChange={handleInputChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CFormGroup>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"mobileNumber\">Celular</CLabel>\r\n                <CInput\r\n                  name=\"mobileNumber\"\r\n                  placeholder=\"Celular\"\r\n                  type=\"number\"\r\n                  value={mobileNumber}\r\n                  onChange={handleInputChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </CFormGroup>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"country\">ContraseÃ±a</CLabel>\r\n                <CInput\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"ContraseÃ±a\"\r\n                  autoComplete=\"new-password\"\r\n                  value={password}\r\n                  onChange={handleInputChange}\r\n                />\r\n                <CFormText className=\"help-block\">\r\n                  Por favor ingrese una contraseÃ±a compleja\r\n                </CFormText>\r\n              </CFormGroup>\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"country\">Repita la contraseÃ±a</CLabel>\r\n                <CInput\r\n                  type=\"password\"\r\n                  name=\"password2\"\r\n                  placeholder=\"Repita la contraseÃ±a\"\r\n                  autoComplete=\"off\"\r\n                  value={password2}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </CFormGroup>\r\n            </CCardBody>\r\n            <CCardFooter className=\"text-center\">\r\n              <CButton\r\n                type=\"submit\"\r\n                size=\"md\"\r\n                color=\"info\"\r\n                onClick={handleUserCreation}\r\n              >\r\n                <CIcon name=\"cil-scrubber\" /> Registrar\r\n              </CButton>\r\n            </CCardFooter>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n      <CModal\r\n        show={success}\r\n        onClose={() => setSuccess(!success)}\r\n        color=\"success\"\r\n      >\r\n        <CModalHeader closeButton>\r\n          <CModalTitle>Administrador creado con Ã©xito</CModalTitle>\r\n        </CModalHeader>\r\n        <CModalFooter className=\"text-center\">\r\n          <CButton\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setSuccess(!success);\r\n              history.push(\"/admins/view-all-doctors\");\r\n            }}\r\n          >\r\n            Cerrar\r\n          </CButton>\r\n        </CModalFooter>\r\n      </CModal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateNewAdmin;\r\n"],"sourceRoot":""}